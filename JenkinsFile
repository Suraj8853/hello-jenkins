 @Library('my-shared-lib') _
pipeline {
    agent none
    options {
        // skip the default “Declarative: Checkout SCM” so we control exactly where checkouts happen
        skipDefaultCheckout()
    }
    tools {
        maven 'maven-3.9.10'
    }
    parameters {
        string(name:'Greeting', defaultValue:'Hellooo jenkins', description:'just a greeting term')
        booleanParam(name:'RUN_EXTRA_TESTS', defaultValue:false, description:'to run extra tests')
        choice(name:'env', choices:['dev', 'staging', 'prod'])
    }
    stages {

        stage('shared') {
            agent any
          steps {
            script {
               
                sayHello('suraj')
            }
          }
        }
        stage('Checkout') {
            agent any
            steps {
                checkout scm
            }
        }

        stage('Test Suites') {
            parallel {
                stage('Integration Tests') {
                    agent any
                    when {
                        expression { params.RUN_EXTRA_TESTS }
                    }
                    steps {
                        checkout scm
                        sh 'mvn clean verify -Pintegration-tests -DskipTests'
                    }
                    post {
                        always {
                            junit allowEmptyResults: true, testResults: '**/target/failsafe-reports/*.xml'
                        }
                    }
                }
                stage('Unit Tests') {
                    agent any
                    /* groovylint-disable-next-line NestedBlockDepth */
                    steps {
                        checkout scm
                        sh 'mvn clean test'
                    }
                    post {
                        always { junit '**/target/surefire-reports/*.xml' }
                    }
                }
            }
        }

        stage('Deploy') {
            agent any
            when {
                expression { params.env != 'dev' }
            }

            steps {
                    echo "deploying to ${params.env}"
            }
        }

        stage('Archive artifacts') {
            agent any
            steps {
                archiveArtifacts artifacts: 'target/*.jar', fingerprint: true
            }
        }
    }

    post {
        success {
            echo 'Build suceeeded 🚀🚀 🥳🥳🥳'
        }
        failure {
            echo 'Build failed ❌❌😵😵'
        }

        always {
            emailext(to: 'surajpai8853@gmail.com,suraj.pai@dhruvts.com', subject: "${currentBuild.currentResult}:Job:${env.JOB_NAME} #${env.BUILD_NUMBER}",
           body: """Build ${env.JOB_NAME}:${env.BUILD_NUMBER} finished with status of ${currentBuild.currentResult}
Console Output: ${env.BUILD_URL}console

Pipeline view : ${env.BUILD_URL} """
           )
        }
    }
}
